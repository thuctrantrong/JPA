package vn.iostar.controller;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.MultipartConfig;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.Part;
import vn.iostar.entity.Category;
import vn.iostar.service.ICategoryService;
import vn.iostar.service.impl.CatergoryServiceImpl;
import vn.iostar.util.constants;

@MultipartConfig
@WebServlet(urlPatterns = { 
    "/admin/categories", 
    "/admin/category/add", 
    "/admin/category/insert", 
    "/admin/category/edit", 
    "/admin/category/update", 
    "/admin/category/delete" 
})
public class AdminController extends HttpServlet {

    private static final long serialVersionUID = 1L;
    public ICategoryService cateService = new CatergoryServiceImpl();

    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        String url = req.getRequestURI();

        switch (url) {
            case "/admin/categories":
                handleCategoryList(req, resp);
                break;
            case "/admin/category/add":
                req.getRequestDispatcher("/views/admin/category-add.jsp").forward(req, resp);
                break;
            case "/admin/category/edit":
                handleCategoryEdit(req, resp);
                break;
            case "/admin/category/delete":
                handleCategoryDelete(req, resp);
                break;
            default:
                resp.sendError(HttpServletResponse.SC_NOT_FOUND);
        }
    }

    private void handleCategoryList(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        List<Category> list = cateService.findAll();
        req.setAttribute("listcate", list);
        req.getRequestDispatcher("/views/admin/category-list.jsp").forward(req, resp);
    }

    private void handleCategoryEdit(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        int id = Integer.parseInt(req.getParameter("id"));
        try {
            Category category = cateService.findById(id);
            req.setAttribute("cate", category);
            req.getRequestDispatcher("/views/admin/category-edit.jsp").forward(req, resp);
        } catch (Exception e) {
            e.printStackTrace();
            resp.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
        }
    }

    private void handleCategoryDelete(HttpServletRequest req, HttpServletResponse resp) throws IOException {
        int id = Integer.parseInt(req.getParameter("id"));
        try {
            cateService.delete(id);
        } catch (Exception e) {
            e.printStackTrace();
        }
        resp.sendRedirect(req.getContextPath() + "/admin/categories");
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        String url = req.getRequestURI();

        if (url.contains("/admin/category/insert")) {
            handleCategoryInsert(req, resp);
        } else if (url.contains("/admin/category/update")) {
            handleCategoryUpdate(req, resp);
        }
    }

    private void handleCategoryInsert(HttpServletRequest req, HttpServletResponse resp) throws IOException, ServletException {
        String categoryname = req.getParameter("categoryname");
        boolean status = Boolean.parseBoolean(req.getParameter("status"));
        String images = req.getParameter("images");

        Category category = new Category();
        category.setCategoryname(categoryname);
        category.setStatus(status);
        category.setImages(handleImageUpload(req, images, "images"));

        cateService.insert(category);
        resp.sendRedirect(req.getContextPath() + "/admin/categories");
    }

    private void handleCategoryUpdate(HttpServletRequest req, HttpServletResponse resp) throws IOException, ServletException {
        int categoryid = Integer.parseInt(req.getParameter("categoryid"));
        String categoryname = req.getParameter("categoryname");
        boolean status = Boolean.parseBoolean(req.getParameter("status"));

        Category category;
        try {
            category = cateService.findById(categoryid);
        } catch (Exception e) {
            e.printStackTrace();
            resp.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
            return;
        }

        category.setCategoryname(categoryname);
        category.setStatus(status);
        String oldImage = category.getImages();
        category.setImages(handleImageUpload(req, oldImage, "images1"));

        try {
            cateService.update(category);
        } catch (Exception e) {
            e.printStackTrace();
            resp.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
            return;
        }

        resp.sendRedirect(req.getContextPath() + "/admin/categories");
    }

    private String handleImageUpload(HttpServletRequest req, String oldImage, String partName) throws IOException, ServletException {
        String fname = "";
        String uploadPath = constants.DIR;

        File uploadDir = new File(uploadPath);
        if (!uploadDir.exists()) {
            uploadDir.mkdir();
        }

        try {
            Part part = req.getPart(partName);
            if (part.getSize() > 0) {
                if (!oldImage.startsWith("https")) {
                    deleteFile(uploadPath + "/" + oldImage);
                }
                String filename = Paths.get(part.getSubmittedFileName()).getFileName().toString();
                String ext = filename.substring(filename.lastIndexOf('.') + 1);
                fname = System.currentTimeMillis() + "." + ext;
                part.write(uploadPath + "/" + fname);
            } else {
                fname = oldImage; // Return old image if no new one is uploaded
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        return fname.isEmpty() ? "avatar.png" : fname;
    }

    public static void deleteFile(String filePath) throws IOException {
        Path path = Paths.get(filePath);
        Files.delete(path);
    }
}
